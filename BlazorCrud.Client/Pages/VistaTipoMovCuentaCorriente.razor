@page "/VistaTipoMovCuentaCorriente"

@using BlazorCrud.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorCrud.Client.Services;

@inject SweetAlertService Swall;
@inject ITipoMovCuentaCorriente TipoMovCuentaCorrienteService; // Asegúrate de que el nombre del servicio sea correcto
@inject HttpClient Http;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador")]

<h3>Cuentas Corrientes</h3>

<a class="btn btn-success btn-sm mb-3" href="FormularioTipoMovCuentaCorriente">Nuevo TipoMovCuentaCorriente</a>

<table class="table">
    <thead>
        <tr>
            <th>ID TipoMovCuentaCorriente</th>
            <th>Operacion Cuenta Corriente</th>
            <th>Nombre</th>
            <th>Fecha Creación</th>
            <th>Usuario Creación</th>
            <th>Fecha Modificación</th>
            <th>Usuario Modificación</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (listaTipoMovCuentaCorriente == null)
        {
            <tr>
                <td colspan="8" align="center">
                    Cargando...
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in listaTipoMovCuentaCorriente)
            {
                <tr>
                    <td>@item.IdTipoMovimientoCXC</td>
                    <td>@item.OperacionCuentaCorriente</td>
                    <td>@item.Nombre</td>
                    <td>@item.FechaCreacion</td>
                    <td>@item.UsuarioCreacion</td>
                    <td>@item.FechaModificacion</td>
                    <td>@item.UsuarioModificacion</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="FormularioTipoMovCuentaCorriente/@item.IdTipoMovimientoCXC">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                            </svg>
                        </a>
                        <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Eliminar(item.IdTipoMovimientoCXC))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0" />
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    List<TipoMovCuentaCorrienteCC>? listaTipoMovCuentaCorriente = null;

    protected override async Task OnInitializedAsync()
    {
        listaTipoMovCuentaCorriente = await TipoMovCuentaCorrienteService.Lista();
    }

    private async Task Eliminar(int id)
    {
        var resultado = await Swall.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar TipoMovCuentaCorriente",
                Text = "Deseas eliminar el Tipo de Movimiento de Cuenta Corriente de forma permanente?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (resultado.IsConfirmed)
        {
            var eliminado = await TipoMovCuentaCorrienteService.Eliminar(id);
            if (eliminado)
                listaTipoMovCuentaCorriente = listaTipoMovCuentaCorriente!.FindAll(e => e.IdTipoMovimientoCXC != id);
        }
    }
}