login
@page "/"
@layout LoginLayout


@inject HttpClient httpClient
@using BlazorCrud.Client.Extensiones
@using BlazorCrud.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime


<div class="row mt-5">

    <div class="col-lg-4 offset-lg-4 border">

        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>

        <div class="mb-3">
            <label>Correo</label>
            <input @bind="login.CorreoElectronico" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Contraseña</label>
            <input type="password" @bind="login.Password" class="form-control" />
        </div>

        <div class="mb-3">
            <button @onclick="IniciarSesion" class="btn btn-primary">Login</button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

    </div>

</div>


@code {
    private UsuarioUSO login = new UsuarioUSO();
    private string errorMessage;


    private async Task IniciarSesion()
    {
        try
        {
            errorMessage = string.Empty; // Resetear el mensaje de error
            var loginResponse = await httpClient.PostAsJsonAsync<UsuarioUSO>("/api/Usuario/Login", login);
            if (loginResponse.IsSuccessStatusCode)
            {
                var sesionUsuario = await loginResponse.Content.ReadFromJsonAsync<SesionDTO>();
                var autenticacionExt = (AutenticacionExtension)autenticacionProvider;

                // Obtener información del cliente usando JavaScript Interop
                var userAgentInfo = await JSRuntime.InvokeAsync<Dictionary<string, string>>("getUserAgentInfo");

                // Llamar al método para actualizar el estado de autenticación y registrar en la bitácora
                 sesionUsuario.HttpUserAgent = userAgentInfo["userAgent"];
                 sesionUsuario.DireccionIp = userAgentInfo["ipAddress"];
                 sesionUsuario.SistemaOperativo = userAgentInfo["os"];
                 sesionUsuario.Dispositivo = userAgentInfo["device"];
                 sesionUsuario.Browser = userAgentInfo["browser"];
                 sesionUsuario.Sesion = userAgentInfo["sessionId"];

                // Determinar si el acceso es concedido, si el usuario está inactivo, o si la contraseña es incorrecta
                bool esAccesoConcedido = true; // Aquí puedes agregar la lógica para determinar si el acceso fue concedido
                bool esUsuarioInactivo = false; // Lógica para determinar si el usuario está inactivo
                bool esPasswordIncorrecto = false; // Lógica para determinar si la contraseña es incorrecta

                await autenticacionExt.ActualizarEstadoAutenticacion(sesionUsuario, esAccesoConcedido, esUsuarioInactivo, esPasswordIncorrecto);

                navManager.NavigateTo("/Home");
            }
            else
            {
                var responseContent = await loginResponse.Content.ReadAsStringAsync();
                errorMessage = $"{responseContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error de conexión: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Se produjo un error: {ex.Message}";
        }
    }
}