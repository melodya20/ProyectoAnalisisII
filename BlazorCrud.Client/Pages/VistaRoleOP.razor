@page "/VistaRoleOP"

@using BlazorCrud.Shared;
@using CurrieTechnologies.Razor.SweetAlert2
@using BlazorCrud.Client.Services;

@inject SweetAlertService Swall;
@inject IRoleOP roleopcionService;
@inject IOpcion opcionService;
@inject IRole roleService;

<h3>Opciones de Role</h3>

<a class="btn btn-success btn-sm mb-3" href="FormularioRoleOP">Nuevo Roles Opcion</a>

<table class="table">
    <thead>
    <th>ID Role</th>
    <th>ID Opción</th>
    <th>Alta</th>
    <th>Baja</th>
    <th>Cambio</th>
    <th>Imprimir</th>
    <th>Exportar</th>
    <th>Fecha Creación</th>
    <th>Usuario Creación</th>
    <th>Fecha Modificación</th>
    <th>Usuario Modificación</th>
    <th></th>
    </thead>
    <tbody>
        @if (listaRoleOpciones == null)
        {
            <tr>
                <td colspan="12" align="center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-cloud-arrow-down-fill" viewBox="0 0 16 16">
                        <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2m2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708" />
                    </svg>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in listaRoleOpciones)
            {
                <tr>
                    <td>@item.IdRole</td>
                    <td>@item.IdOpcion</td>
                    <td>@item.Alta</td>
                    <td>@item.Baja</td>
                    <td>@item.Cambio</td>
                    <td>@item.Imprimir</td>
                    <td>@item.Exportar</td>
                    <td>@item.FechaCreacion</td>
                    <td>@item.UsuarioCreacion</td>
                    <td>@item.FechaModificacion</td>
                    <td>@item.UsuarioModificacion</td>
                    <td>
                        <NavLink class="btn btn-primary btn-sm" href="@($"FormularioRoleOP/{item.IdRole}/{item.IdOpcion}")">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                                <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z" />
                            </svg>
                        </NavLink>
                        <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Eliminar(item.IdRole, item.IdOpcion))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1 1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0" />
                            </svg>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    List<RoleOP>? listaRoleOpciones = null;

    protected override async Task OnInitializedAsync()
    {
        listaRoleOpciones = await roleopcionService.Lista();
    }

    private async Task Eliminar(int idRole, int idOpcion)
    {
        var confirm = await Swall.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "No podrás recuperar este registro.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (confirm.IsConfirmed)
        {
            try
            {
                var resultado = await roleopcionService.Eliminar(idRole, idOpcion);

                if (resultado)
                {
                    await Swall.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Text = "El registro ha sido eliminado.",
                            Icon = SweetAlertIcon.Success
                        });

                    listaRoleOpciones = await roleopcionService.Lista();
                }
            }
            catch (Exception ex)
            {
                await Swall.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"No se pudo eliminar el registro. {ex.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }
}
